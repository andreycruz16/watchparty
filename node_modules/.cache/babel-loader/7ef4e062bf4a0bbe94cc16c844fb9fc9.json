{"ast":null,"code":"//TODO: handle comments\nfunction readDocType(xmlData, i) {\n  var entities = {};\n\n  if (xmlData[i + 3] === 'O' && xmlData[i + 4] === 'C' && xmlData[i + 5] === 'T' && xmlData[i + 6] === 'Y' && xmlData[i + 7] === 'P' && xmlData[i + 8] === 'E') {\n    i = i + 9;\n    var angleBracketsCount = 1;\n    var hasBody = false,\n        entity = false,\n        comment = false;\n    var exp = \"\";\n\n    for (; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        if (hasBody && xmlData[i + 1] === '!' && xmlData[i + 2] === 'E' && xmlData[i + 3] === 'N' && xmlData[i + 4] === 'T' && xmlData[i + 5] === 'I' && xmlData[i + 6] === 'T' && xmlData[i + 7] === 'Y') {\n          i += 7;\n          entity = true;\n        } else if (hasBody && xmlData[i + 1] === '!' && xmlData[i + 2] === 'E' && xmlData[i + 3] === 'L' && xmlData[i + 4] === 'E' && xmlData[i + 5] === 'M' && xmlData[i + 6] === 'E' && xmlData[i + 7] === 'N' && xmlData[i + 8] === 'T') {\n          //Not supported\n          i += 8;\n        } else if ( //comment\n        xmlData[i + 1] === '!' && xmlData[i + 2] === '-' && xmlData[i + 3] === '-') {\n          comment = true;\n        } else {\n          throw new Error(\"Invalid DOCTYPE\");\n        }\n\n        angleBracketsCount++;\n        exp = \"\";\n      } else if (xmlData[i] === '>') {\n        if (comment) {\n          if (xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\") {\n            comment = false;\n          } else {\n            throw new Error(\"Invalid XML comment in DOCTYPE\");\n          }\n        } else if (entity) {\n          parseEntityExp(exp, entities);\n          entity = false;\n        }\n\n        angleBracketsCount--;\n\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      } else if (xmlData[i] === '[') {\n        hasBody = true;\n      } else {\n        exp += xmlData[i];\n      }\n    }\n\n    if (angleBracketsCount !== 0) {\n      throw new Error(\"Unclosed DOCTYPE\");\n    }\n  } else {\n    throw new Error(\"Invalid Tag instead of DOCTYPE\");\n  }\n\n  return {\n    entities: entities,\n    i: i\n  };\n}\n\nvar entityRegex = RegExp(\"^\\\\s([a-zA-z0-0]+)[ \\t](['\\\"])([^&]+)\\\\2\");\n\nfunction parseEntityExp(exp, entities) {\n  var match = entityRegex.exec(exp);\n\n  if (match) {\n    entities[match[1]] = {\n      regx: RegExp(\"&\".concat(match[1], \";\"), \"g\"),\n      val: match[3]\n    };\n  }\n}\n\nmodule.exports = readDocType;","map":{"version":3,"sources":["/home/runner/work/watchparty/watchparty/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js"],"names":["readDocType","xmlData","i","entities","angleBracketsCount","hasBody","entity","comment","exp","length","Error","parseEntityExp","entityRegex","RegExp","match","exec","regx","val","module","exports"],"mappings":"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","sourcesContent":["//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, entity = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<') {\n                if( hasBody && \n                     xmlData[i+1] === '!' &&\n                     xmlData[i+2] === 'E' &&\n                     xmlData[i+3] === 'N' &&\n                     xmlData[i+4] === 'T' &&\n                     xmlData[i+5] === 'I' &&\n                     xmlData[i+6] === 'T' &&\n                     xmlData[i+7] === 'Y'\n                ){\n                    i += 7;\n                    entity = true;\n                }else if( hasBody && \n                    xmlData[i+1] === '!' &&\n                     xmlData[i+2] === 'E' &&\n                     xmlData[i+3] === 'L' &&\n                     xmlData[i+4] === 'E' &&\n                     xmlData[i+5] === 'M' &&\n                     xmlData[i+6] === 'E' &&\n                     xmlData[i+7] === 'N' &&\n                     xmlData[i+8] === 'T'\n                ){\n                    //Not supported\n                    i += 8;\n                }else if( //comment\n                    xmlData[i+1] === '!' &&\n                    xmlData[i+2] === '-' &&\n                    xmlData[i+3] === '-'\n                ){\n                    comment = true;\n                }else{\n                    throw new Error(\"Invalid DOCTYPE\");\n                }\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') {\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                    }else{\n                        throw new Error(`Invalid XML comment in DOCTYPE`);\n                    }\n                }else if(entity){\n                    parseEntityExp(exp, entities);\n                    entity = false;\n                }\n                angleBracketsCount--;\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nconst entityRegex = RegExp(\"^\\\\s([a-zA-z0-0]+)[ \\t](['\\\"])([^&]+)\\\\2\");\nfunction parseEntityExp(exp, entities){\n    const match = entityRegex.exec(exp);\n    if(match){\n        entities[ match[1] ] = {\n            regx : RegExp( `&${match[1]};`,\"g\"),\n            val: match[3]\n        };\n    }\n}\nmodule.exports = readDocType;"]},"metadata":{},"sourceType":"script"}