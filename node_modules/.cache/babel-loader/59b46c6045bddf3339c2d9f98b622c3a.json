{"ast":null,"code":"import GuacamoleKeyboard from'./guacamole-keyboard';var Interface=function Interface(element){var Keyboard={};GuacamoleKeyboard.bind(Keyboard,element)();return Keyboard;};export default Interface;","map":{"version":3,"sources":["/home/runner/work/watchparty/watchparty/src/components/VBrowser/keyboard.ts"],"names":["GuacamoleKeyboard","Interface","element","Keyboard","bind"],"mappings":"AAAA,MAAOA,CAAAA,iBAAP,KAA8B,sBAA9B,CAqEA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAAUC,OAAV,CAAyD,CACzE,GAAMC,CAAAA,QAAQ,CAAG,EAAjB,CAEAH,iBAAiB,CAACI,IAAlB,CAAuBD,QAAvB,CAAiCD,OAAjC,IAEA,MAAOC,CAAAA,QAAP,CACD,CAND,CAQA,cAAeF,CAAAA,SAAf","sourcesContent":["import GuacamoleKeyboard from './guacamole-keyboard';\n\nexport interface GuacamoleKeyboardInterface {\n  /**\n   * Fired whenever the user presses a key with the element associated\n   * with this Guacamole.Keyboard in focus.\n   *\n   * @event\n   * @param {Number} keysym The keysym of the key being pressed.\n   * @return {Boolean} true if the key event should be allowed through to the\n   *                   browser, false otherwise.\n   */\n  onkeydown?: (keysym: number) => boolean;\n\n  /**\n   * Fired whenever the user releases a key with the element associated\n   * with this Guacamole.Keyboard in focus.\n   *\n   * @event\n   * @param {Number} keysym The keysym of the key being released.\n   */\n  onkeyup?: (keysym: number) => void;\n\n  /**\n   * Marks a key as pressed, firing the keydown event if registered. Key\n   * repeat for the pressed key will start after a delay if that key is\n   * not a modifier. The return value of this function depends on the\n   * return value of the keydown event handler, if any.\n   *\n   * @param {Number} keysym The keysym of the key to press.\n   * @return {Boolean} true if event should NOT be canceled, false otherwise.\n   */\n  press: (keysym: number) => boolean;\n\n  /**\n   * Marks a key as released, firing the keyup event if registered.\n   *\n   * @param {Number} keysym The keysym of the key to release.\n   */\n  release: (keysym: number) => void;\n\n  /**\n   * Presses and releases the keys necessary to type the given string of\n   * text.\n   *\n   * @param {String} str\n   *     The string to type.\n   */\n  type: (str: string) => void;\n\n  /**\n   * Resets the state of this keyboard, releasing all keys, and firing keyup\n   * events for each released key.\n   */\n  reset: () => void;\n\n  /**\n   * Attaches event listeners to the given Element, automatically translating\n   * received key, input, and composition events into simple keydown/keyup\n   * events signalled through this Guacamole.Keyboard's onkeydown and\n   * onkeyup handlers.\n   *\n   * @param {Element|Document} element\n   *     The Element to attach event listeners to for the sake of handling\n   *     key or input events.\n   */\n  listenTo: (element: Element | Document) => void;\n}\n\nconst Interface = function (element?: Element): GuacamoleKeyboardInterface {\n  const Keyboard = {};\n\n  GuacamoleKeyboard.bind(Keyboard, element)();\n\n  return Keyboard as GuacamoleKeyboardInterface;\n};\n\nexport default Interface;\n"]},"metadata":{},"sourceType":"module"}