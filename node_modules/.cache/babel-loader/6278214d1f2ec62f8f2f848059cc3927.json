{"ast":null,"code":"'use strict';\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\n\nfunction prettify(node, options) {\n  return compress(node, options);\n}\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\n\n\nfunction compress(arr, options, jPath) {\n  var text;\n  var compressedObj = {};\n\n  for (var i = 0; i < arr.length; i++) {\n    var tagObj = arr[i];\n    var property = propName(tagObj);\n    var newJpath = \"\";\n    if (jPath === undefined) newJpath = property;else newJpath = jPath + \".\" + property;\n\n    if (property === options.textNodeName) {\n      if (text === undefined) text = tagObj[property];else text += \"\" + tagObj[property];\n    } else if (property === undefined) {\n      continue;\n    } else if (tagObj[property]) {\n      var val = compress(tagObj[property], options, newJpath);\n      var isLeaf = isLeafTag(val, options);\n\n      if (tagObj[\":@\"]) {\n        assignAttributes(val, tagObj[\":@\"], newJpath, options);\n      } else if (Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode) {\n        val = val[options.textNodeName];\n      } else if (Object.keys(val).length === 0) {\n        if (options.alwaysCreateTextNode) val[options.textNodeName] = \"\";else val = \"\";\n      }\n\n      if (compressedObj[property] !== undefined) {\n        if (!Array.isArray(compressedObj[property])) {\n          compressedObj[property] = [compressedObj[property]];\n        }\n\n        compressedObj[property].push(val);\n      } else {\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf)) {\n          compressedObj[property] = [val];\n        } else {\n          compressedObj[property] = val;\n        }\n      }\n    }\n  } // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n\n\n  if (typeof text === \"string\") {\n    if (text.length > 0) compressedObj[options.textNodeName] = text;\n  } else if (text !== undefined) compressedObj[options.textNodeName] = text;\n\n  return compressedObj;\n}\n\nfunction propName(obj) {\n  var keys = Object.keys(obj);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    if (key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options) {\n  if (attrMap) {\n    var keys = Object.keys(attrMap);\n    var len = keys.length; //don't make it inline\n\n    for (var i = 0; i < len; i++) {\n      var atrrName = keys[i];\n\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [attrMap[atrrName]];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options) {\n  var propCount = Object.keys(obj).length;\n  if (propCount === 0 || propCount === 1 && obj[options.textNodeName]) return true;\n  return false;\n}\n\nexports.prettify = prettify;","map":{"version":3,"sources":["/home/runner/work/watchparty/watchparty/node_modules/fast-xml-parser/src/xmlparser/node2json.js"],"names":["prettify","node","options","compress","arr","jPath","text","compressedObj","i","length","tagObj","property","propName","newJpath","undefined","textNodeName","val","isLeaf","isLeafTag","assignAttributes","Object","keys","alwaysCreateTextNode","Array","isArray","push","obj","key","attrMap","jpath","len","atrrName","propCount","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined) {\n        if(!Array.isArray(compressedObj[property])) {\n          compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const propCount = Object.keys(obj).length;\n  if( propCount === 0 || (propCount === 1 && obj[options.textNodeName]) ) return true;\n  return false;\n}\nexports.prettify = prettify;\n"]},"metadata":{},"sourceType":"script"}