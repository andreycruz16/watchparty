{"ast":null,"code":"'use strict';\n\nvar util = require('./util');\n\nvar defaultOptions = {\n  allowBooleanAttributes: false,\n  //A tag can have attributes without any value\n  unpairedTags: []\n}; //const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\n\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options); //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n\n  var tags = [];\n  var tagFound = false; //indicates that the root tag has been closed (aka. depth 0 has been reached)\n\n  var reachedRoot = false;\n\n  if (xmlData[0] === \"\\uFEFF\") {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n\n  for (var i = 0; i < xmlData.length; i++) {\n    if (xmlData[i] === '<' && xmlData[i + 1] === '?') {\n      i += 2;\n      i = readPI(xmlData, i);\n      if (i.err) return i;\n    } else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      var tagStartPos = i;\n      i++;\n\n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        var closingTag = false;\n\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        } //read tagname\n\n\n        var tagName = '';\n\n        for (; i < xmlData.length && xmlData[i] !== '>' && xmlData[i] !== ' ' && xmlData[i] !== '\\t' && xmlData[i] !== '\\n' && xmlData[i] !== '\\r'; i++) {\n          tagName += xmlData[i];\n        }\n\n        tagName = tagName.trim(); //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1); //continue;\n\n          i--;\n        }\n\n        if (!validateTagName(tagName)) {\n          var msg = void 0;\n\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\" + tagName + \"' is an invalid name.\";\n          }\n\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        var result = readAttributeStr(xmlData, i);\n\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\" + tagName + \"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n\n        var attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          var attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          var isValid = validateAttributeString(attrStr, options);\n\n          if (isValid === true) {\n            tagFound = true; //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\" + tagName + \"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\" + tagName + \"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            var otg = tags.pop();\n\n            if (tagName !== otg.tagName) {\n              var openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag', \"Expected closing tag '\" + otg.tagName + \"' (opened in line \" + openPos.line + \", col \" + openPos.col + \") instead of closing tag '\" + tagName + \"'.\", getLineNumberForPosition(xmlData, tagStartPos));\n            } //when there are no more tags, we reached the root level.\n\n\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          var _isValid = validateAttributeString(attrStr, options);\n\n          if (_isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(_isValid.err.code, _isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + _isValid.err.line));\n          } //if the root level has been reached before ...\n\n\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if (options.unpairedTags.indexOf(tagName) !== -1) {//don't push into stack\n          } else {\n            tags.push({\n              tagName: tagName,\n              tagStartPos: tagStartPos\n            });\n          }\n\n          tagFound = true;\n        } //skip tag text value\n        //It may include comments and CDATA value\n\n\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i + 1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else {\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            var afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1) return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          } else {\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n\n\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if (isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n\n      return getErrorObject('InvalidChar', \"char '\" + xmlData[i] + \"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  } else if (tags.length == 1) {\n    return getErrorObject('InvalidTag', \"Unclosed tag '\" + tags[0].tagName + \"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  } else if (tags.length > 0) {\n    return getErrorObject('InvalidXml', \"Invalid '\" + JSON.stringify(tags.map(function (t) {\n      return t.tagName;\n    }), null, 4).replace(/\\r?\\n/g, '') + \"' found.\", {\n      line: 1,\n      col: 1\n    });\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char) {\n  return char === ' ' || char === '\\t' || char === '\\n' || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\n\n\nfunction readPI(xmlData, i) {\n  var start = i;\n\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      var tagname = xmlData.substr(start, i - start);\n\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (xmlData.length > i + 8 && xmlData[i + 1] === 'D' && xmlData[i + 2] === 'O' && xmlData[i + 3] === 'C' && xmlData[i + 4] === 'T' && xmlData[i + 5] === 'Y' && xmlData[i + 6] === 'P' && xmlData[i + 7] === 'E') {\n    var angleBracketsCount = 1;\n\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (xmlData.length > i + 9 && xmlData[i + 1] === '[' && xmlData[i + 2] === 'C' && xmlData[i + 3] === 'D' && xmlData[i + 4] === 'A' && xmlData[i + 5] === 'T' && xmlData[i + 6] === 'A' && xmlData[i + 7] === '[') {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nvar doubleQuote = '\"';\nvar singleQuote = \"'\";\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\n\nfunction readAttributeStr(xmlData, i) {\n  var attrStr = '';\n  var startChar = '';\n  var tagClosed = false;\n\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {//if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n\n    attrStr += xmlData[i];\n  }\n\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n/**\n * Select all the attributes whether valid or invalid.\n */\n\n\nvar validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g'); //attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n  //if(attrStr.trim().length === 0) return true; //empty string\n  var matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  var attrNames = {};\n\n  for (var i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\" + matches[i][2] + \"' has no space in starting.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\" + matches[i][2] + \"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\" + matches[i][2] + \"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n\n\n    var attrName = matches[i][2];\n\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\" + attrName + \"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\" + attrName + \"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  var re = /\\d/;\n\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';') return i;\n    if (!xmlData[i].match(re)) break;\n  }\n\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';') return -1;\n\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n\n  var count = 0;\n\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20) continue;\n    if (xmlData[i] === ';') break;\n    return -1;\n  }\n\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col\n    }\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n} // const startsWithXML = /^xml/i;\n\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname)\n  /* && !tagname.match(startsWithXML) */\n  ;\n} //this function returns the line number for the character at the given index\n\n\nfunction getLineNumberForPosition(xmlData, index) {\n  var lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n} //this function returns the position of the first character of match within attrStr\n\n\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}","map":{"version":3,"sources":["/home/runner/work/watchparty/watchparty/node_modules/fast-xml-parser/src/validator.js"],"names":["util","require","defaultOptions","allowBooleanAttributes","unpairedTags","exports","validate","xmlData","options","Object","assign","tags","tagFound","reachedRoot","substr","i","length","readPI","err","tagStartPos","readCommentAndCDATA","closingTag","tagName","trim","substring","validateTagName","msg","getErrorObject","getLineNumberForPosition","result","readAttributeStr","attrStr","value","index","attrStrStart","isValid","validateAttributeString","code","line","tagClosed","otg","pop","openPos","col","indexOf","push","afterAmp","validateAmpersand","isWhiteSpace","JSON","stringify","map","t","replace","char","start","tagname","angleBracketsCount","doubleQuote","singleQuote","startChar","validAttrStrRegxp","RegExp","matches","getAllMatches","attrNames","getPositionFromMatch","undefined","attrName","validateAttrName","hasOwnProperty","validateNumberAmpersand","re","match","count","message","lineNumber","isName","lines","split","startIndex"],"mappings":"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","sourcesContent":["'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n"]},"metadata":{},"sourceType":"script"}